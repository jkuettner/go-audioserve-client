// Package apiv1specs provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package apiv1specs

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for Ordering.
const (
	A Ordering = "a"

	M Ordering = "m"
)

// AudioFile defines model for AudioFile.
type AudioFile struct {
	Meta *struct {
		// Encoding bitrate of file - original, before transcoding
		Bitrate *int `json:"bitrate,omitempty"`

		// Duration of audio file in seconds
		Duration *int `json:"duration,omitempty"`

		// Metadata tags as map of name to value
		Tags *map[string]interface{} `json:"tags"`
	} `json:"meta"`

	// Mime type of audio file (before transcoding)
	Mime string `json:"mime"`
	Name string `json:"name"`
	Path string `json:"path"`

	// For chapter chunk out from big chaptered file (like .m4b)
	// this is start and duration (in milliseconds) of chapter with the that file
	Section *struct {
		// Duration of chapter in ms
		Duration *int `json:"duration,omitempty"`

		// Start of chapter in ms
		Start *int `json:"start,omitempty"`
	} `json:"section"`
}

// AudioFolder defines model for AudioFolder.
type AudioFolder struct {
	Cover       *TypedFile   `json:"cover"`
	Description *TypedFile   `json:"description"`
	Files       *[]AudioFile `json:"files,omitempty"`

	// Is virtual folder - e.g. representing big chapterized file (.m4b etc.)
	IsFile *bool `json:"is_file,omitempty"`

	// last modification timestamp (unix time in miliseconds)
	Modified   *float32     `json:"modified,omitempty"`
	Subfolders *[]Subfolder `json:"subfolders,omitempty"`

	// Metadata tags for this folders - map of name to value
	Tags *map[string]interface{} `json:"tags"`

	// Total playback time of the audiofolder in seconds
	TotalTime *int `json:"total_time,omitempty"`
}

// CollectionsInfo defines model for CollectionsInfo.
type CollectionsInfo struct {
	// Size of names array
	Count *int `json:"count,omitempty"`

	// Is folder download endpoint enabled on server?
	FolderDownload *bool `json:"folder_download,omitempty"`

	// Names of available collections
	Names *[]string `json:"names,omitempty"`

	// Is playback position API enabled on server?
	SharedPositions *bool `json:"shared_positions,omitempty"`

	// Version of audioserve (and thus also version of API)
	Version *string `json:"version,omitempty"`
}

// Playback position
type Position struct {
	// Collection number (index in names from response in /collections endpoint)
	Collection int32 `json:"collection"`

	// Audio file (or chapter)
	File string `json:"file"`

	// Audio folder path
	Folder string `json:"folder"`

	// Folder was listened to the end
	FolderFinished *bool `json:"folder_finished,omitempty"`

	// Position in audiofile in seconds
	Position float32 `json:"position"`

	// Position timestamp - unix time in ms
	// Timestamp is generated on server, so if you post new  position
	// it is used to check, if there is not newer position,
	// but actual value then is assigned by server
	Timestamp int64 `json:"timestamp"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	// Not used now, only subfolders are searched
	Files      *[]AudioFile `json:"files,omitempty"`
	Subfolders *[]Subfolder `json:"subfolders,omitempty"`
}

// SharedSecret defines model for SharedSecret.
type SharedSecret struct {
	// Salted shared secret
	Secret string `json:"secret"`
}

// Subfolder defines model for Subfolder.
type Subfolder struct {
	// was folder listened to the end (by given group, valid only if group parameter was provided)
	Finished *bool `json:"finished,omitempty"`

	// Is virtual folder - e.g. representing big chapterized file (.m4b etc.)
	IsFile *bool `json:"is_file,omitempty"`

	// last modification timestamp (unix time in miliseconds)
	Modified *float32 `json:"modified,omitempty"`
	Name     string   `json:"name"`
	Path     string   `json:"path"`
}

// Transcoding defines model for Transcoding.
type Transcoding struct {
	// Average bitrate of the transcoding in kbps
	Bitrate int `json:"bitrate"`

	// Name of transcoding in form of audio_codec-in-container, for instance opus-in-ogg
	Name string `json:"name"`
}

// TranscodingsInfo defines model for TranscodingsInfo.
type TranscodingsInfo struct {
	High *Transcoding `json:"high,omitempty"`
	Low  *Transcoding `json:"low,omitempty"`

	// Maximum number of parallel transcodings allowed by server
	MaxTranscodings *int         `json:"max_transcodings,omitempty"`
	Medium          *Transcoding `json:"medium,omitempty"`
}

// TypedFile defines model for TypedFile.
type TypedFile struct {
	// mime type of the file
	Mime string `json:"mime"`

	// path to the file with collection
	Path string `json:"path"`
}

// CollectionId defines model for CollectionId.
type CollectionId int

// Finished defines model for Finished.
type Finished bool

// From defines model for From.
type From int64

// Group defines model for Group.
type Group string

// GroupInPath defines model for GroupInPath.
type GroupInPath string

// Ordering defines model for Ordering.
type Ordering string

// Path defines model for Path.
type Path string

// To defines model for To.
type To int64

// Unfinished defines model for Unfinished.
type Unfinished bool

// PostAuthenticateJSONBody defines parameters for PostAuthenticate.
type PostAuthenticateJSONBody SharedSecret

// GetPositionsGroupParams defines parameters for GetPositionsGroup.
type GetPositionsGroupParams struct {
	// Filters only positions for finished folders
	Finished *Finished `json:"finished,omitempty"`

	// Filters only positions for unfinished folders
	Unfinished *Unfinished `json:"unfinished,omitempty"`

	// Filters positions that are older than this timestamp  (unix time in ms)
	From *From `json:"from,omitempty"`

	// Filters positions that are newer or equal than this timestamp  (unix time in ms)
	To *To `json:"to,omitempty"`
}

// PostPositionsGroupJSONBody defines parameters for PostPositionsGroup.
type PostPositionsGroupJSONBody Position

// GetPositionsGroupColIdPathParams defines parameters for GetPositionsGroupColIdPath.
type GetPositionsGroupColIdPathParams struct {
	// Filters only positions for finished folders
	Finished *Finished `json:"finished,omitempty"`

	// Filters only positions for unfinished folders
	Unfinished *Unfinished `json:"unfinished,omitempty"`

	// Filters positions that are older than this timestamp  (unix time in ms)
	From *From `json:"from,omitempty"`

	// Filters positions that are newer or equal than this timestamp  (unix time in ms)
	To *To `json:"to,omitempty"`

	// Recursively look for all subdirectories
	Rec *bool `json:"rec,omitempty"`
}

// GetColIdAudioPathParams defines parameters for GetColIdAudioPath.
type GetColIdAudioPathParams struct {
	// Stars playback as <seek> seconds from beginning of file.
	// Beware overusing this parameter, as it can cause quite ineffective usage
	// of bandwidth and transcoding (which each seek like this part of file from
	// seek position is send again)
	Seek *float32 `json:"seek,omitempty"`

	// Required transcoding of the file **l**ow, **m**edium or **h**igh
	// as described by `/transcodings` endpoint response
	// If omitted or set to **0** no transcoding is done
	Trans *GetColIdAudioPathParamsTrans `json:"trans,omitempty"`

	// Optionally client can request range of bytes from file, will only work if
	// file is not actually transcoded.
	// Range is standard HTTP header as per [RFC 7233](https://datatracker.ietf.org/doc/html/rfc7233)
	Range *string `json:"range,omitempty"`
}

// GetColIdAudioPathParamsTrans defines parameters for GetColIdAudioPath.
type GetColIdAudioPathParamsTrans string

// GetColIdDownloadPathParams defines parameters for GetColIdDownloadPath.
type GetColIdDownloadPathParams struct {
	// Archive format - zip(default) or tar
	Fmt *GetColIdDownloadPathParamsFmt `json:"fmt,omitempty"`
}

// GetColIdDownloadPathParamsFmt defines parameters for GetColIdDownloadPath.
type GetColIdDownloadPathParamsFmt string

// GetColIdFolderParams defines parameters for GetColIdFolder.
type GetColIdFolderParams struct {
	// ordering of subfolders, two values are now supported:
	// - `a` alphabetical (default if not present)
	// - `m` recent first (using folder mtime)
	Ord *GetColIdFolderParamsOrd `json:"ord,omitempty"`

	// Playback position sharing group.
	// If present last know position for the folder can be included in response
	Group *Group `json:"group,omitempty"`
}

// GetColIdFolderParamsOrd defines parameters for GetColIdFolder.
type GetColIdFolderParamsOrd string

// GetColIdFolderPathParams defines parameters for GetColIdFolderPath.
type GetColIdFolderPathParams struct {
	// ordering of subfolders, two values are now supported:
	// - `a` alphabetical (default if not present)
	// - `m` recent first (using folder mtime)
	Ord *GetColIdFolderPathParamsOrd `json:"ord,omitempty"`

	// Playback position sharing group.
	// If present last know position for the folder can be included in response
	Group *Group `json:"group,omitempty"`
}

// GetColIdFolderPathParamsOrd defines parameters for GetColIdFolderPath.
type GetColIdFolderPathParamsOrd string

// GetColIdSearchParams defines parameters for GetColIdSearch.
type GetColIdSearchParams struct {
	// ordering of subfolders, two values are now supported:
	// - `a` alphabetical (default if not present)
	// - `m` recent first (using folder mtime)
	Ord *GetColIdSearchParamsOrd `json:"ord,omitempty"`

	// Search terms (separated by space). Looks for all terms on folder path.
	Q string `json:"q"`
}

// GetColIdSearchParamsOrd defines parameters for GetColIdSearch.
type GetColIdSearchParamsOrd string

// PostAuthenticateJSONRequestBody defines body for PostAuthenticate for application/json ContentType.
type PostAuthenticateJSONRequestBody PostAuthenticateJSONBody

// PostPositionsGroupJSONRequestBody defines body for PostPositionsGroup for application/json ContentType.
type PostPositionsGroupJSONRequestBody PostPositionsGroupJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostAuthenticate request with any body
	PostAuthenticateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthenticate(ctx context.Context, body PostAuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCollections request
	GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositionsGroup request
	GetPositionsGroup(ctx context.Context, group GroupInPath, params *GetPositionsGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPositionsGroup request with any body
	PostPositionsGroupWithBody(ctx context.Context, group GroupInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPositionsGroup(ctx context.Context, group GroupInPath, body PostPositionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositionsGroupLast request
	GetPositionsGroupLast(ctx context.Context, group GroupInPath, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPositionsGroupColIdPath request
	GetPositionsGroupColIdPath(ctx context.Context, group GroupInPath, colId CollectionId, path Path, params *GetPositionsGroupColIdPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTranscodings request
	GetTranscodings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdAudioPath request
	GetColIdAudioPath(ctx context.Context, colId CollectionId, path Path, params *GetColIdAudioPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdCoverPath request
	GetColIdCoverPath(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdDescPath request
	GetColIdDescPath(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdDownloadPath request
	GetColIdDownloadPath(ctx context.Context, colId CollectionId, path Path, params *GetColIdDownloadPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdFolder request
	GetColIdFolder(ctx context.Context, colId CollectionId, params *GetColIdFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdFolderPath request
	GetColIdFolderPath(ctx context.Context, colId CollectionId, path Path, params *GetColIdFolderPathParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdRecent request
	GetColIdRecent(ctx context.Context, colId CollectionId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetColIdSearch request
	GetColIdSearch(ctx context.Context, colId CollectionId, params *GetColIdSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostAuthenticateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthenticateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthenticate(ctx context.Context, body PostAuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthenticateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCollections(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCollectionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositionsGroup(ctx context.Context, group GroupInPath, params *GetPositionsGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsGroupRequest(c.Server, group, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPositionsGroupWithBody(ctx context.Context, group GroupInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPositionsGroupRequestWithBody(c.Server, group, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPositionsGroup(ctx context.Context, group GroupInPath, body PostPositionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPositionsGroupRequest(c.Server, group, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositionsGroupLast(ctx context.Context, group GroupInPath, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsGroupLastRequest(c.Server, group)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPositionsGroupColIdPath(ctx context.Context, group GroupInPath, colId CollectionId, path Path, params *GetPositionsGroupColIdPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPositionsGroupColIdPathRequest(c.Server, group, colId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTranscodings(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTranscodingsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdAudioPath(ctx context.Context, colId CollectionId, path Path, params *GetColIdAudioPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdAudioPathRequest(c.Server, colId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdCoverPath(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdCoverPathRequest(c.Server, colId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdDescPath(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdDescPathRequest(c.Server, colId, path)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdDownloadPath(ctx context.Context, colId CollectionId, path Path, params *GetColIdDownloadPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdDownloadPathRequest(c.Server, colId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdFolder(ctx context.Context, colId CollectionId, params *GetColIdFolderParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdFolderRequest(c.Server, colId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdFolderPath(ctx context.Context, colId CollectionId, path Path, params *GetColIdFolderPathParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdFolderPathRequest(c.Server, colId, path, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdRecent(ctx context.Context, colId CollectionId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdRecentRequest(c.Server, colId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetColIdSearch(ctx context.Context, colId CollectionId, params *GetColIdSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetColIdSearchRequest(c.Server, colId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostAuthenticateRequest calls the generic PostAuthenticate builder with application/json body
func NewPostAuthenticateRequest(server string, body PostAuthenticateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthenticateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthenticateRequestWithBody generates requests for PostAuthenticate with any type of body
func NewPostAuthenticateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/authenticate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetCollectionsRequest generates requests for GetCollections
func NewGetCollectionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/collections/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPositionsGroupRequest generates requests for GetPositionsGroup
func NewGetPositionsGroupRequest(server string, group GroupInPath, params *GetPositionsGroupParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Finished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished", runtime.ParamLocationQuery, *params.Finished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unfinished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unfinished", runtime.ParamLocationQuery, *params.Unfinished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPositionsGroupRequest calls the generic PostPositionsGroup builder with application/json body
func NewPostPositionsGroupRequest(server string, group GroupInPath, body PostPositionsGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPositionsGroupRequestWithBody(server, group, "application/json", bodyReader)
}

// NewPostPositionsGroupRequestWithBody generates requests for PostPositionsGroup with any type of body
func NewPostPositionsGroupRequestWithBody(server string, group GroupInPath, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPositionsGroupLastRequest generates requests for GetPositionsGroupLast
func NewGetPositionsGroupLastRequest(server string, group GroupInPath) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions/%s/last", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPositionsGroupColIdPathRequest generates requests for GetPositionsGroupColIdPath
func NewGetPositionsGroupColIdPathRequest(server string, group GroupInPath, colId CollectionId, path Path, params *GetPositionsGroupColIdPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "group", runtime.ParamLocationPath, group)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/positions/%s/%s/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Finished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "finished", runtime.ParamLocationQuery, *params.Finished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Unfinished != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "unfinished", runtime.ParamLocationQuery, *params.Unfinished); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Rec != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rec", runtime.ParamLocationQuery, *params.Rec); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTranscodingsRequest generates requests for GetTranscodings
func NewGetTranscodingsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/transcodings/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdAudioPathRequest generates requests for GetColIdAudioPath
func NewGetColIdAudioPathRequest(server string, colId CollectionId, path Path, params *GetColIdAudioPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/audio/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Seek != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seek", runtime.ParamLocationQuery, *params.Seek); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Trans != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "trans", runtime.ParamLocationQuery, *params.Trans); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.Range != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "range", runtime.ParamLocationHeader, *params.Range)
		if err != nil {
			return nil, err
		}

		req.Header.Set("range", headerParam0)
	}

	return req, nil
}

// NewGetColIdCoverPathRequest generates requests for GetColIdCoverPath
func NewGetColIdCoverPathRequest(server string, colId CollectionId, path Path) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/cover/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdDescPathRequest generates requests for GetColIdDescPath
func NewGetColIdDescPathRequest(server string, colId CollectionId, path Path) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/desc/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdDownloadPathRequest generates requests for GetColIdDownloadPath
func NewGetColIdDownloadPathRequest(server string, colId CollectionId, path Path, params *GetColIdDownloadPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/download/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Fmt != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "fmt", runtime.ParamLocationQuery, *params.Fmt); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdFolderRequest generates requests for GetColIdFolder
func NewGetColIdFolderRequest(server string, colId CollectionId, params *GetColIdFolderParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/folder/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ord", runtime.ParamLocationQuery, *params.Ord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdFolderPathRequest generates requests for GetColIdFolderPath
func NewGetColIdFolderPathRequest(server string, colId CollectionId, path Path, params *GetColIdFolderPathParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "path", runtime.ParamLocationPath, path)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/folder/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ord", runtime.ParamLocationQuery, *params.Ord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Group != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "group", runtime.ParamLocationQuery, *params.Group); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdRecentRequest generates requests for GetColIdRecent
func NewGetColIdRecentRequest(server string, colId CollectionId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/recent", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetColIdSearchRequest generates requests for GetColIdSearch
func NewGetColIdSearchRequest(server string, colId CollectionId, params *GetColIdSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "col_id", runtime.ParamLocationPath, colId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Ord != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ord", runtime.ParamLocationQuery, *params.Ord); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "q", runtime.ParamLocationQuery, params.Q); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostAuthenticate request with any body
	PostAuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthenticateResponse, error)

	PostAuthenticateWithResponse(ctx context.Context, body PostAuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthenticateResponse, error)

	// GetCollections request
	GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error)

	// GetPositionsGroup request
	GetPositionsGroupWithResponse(ctx context.Context, group GroupInPath, params *GetPositionsGroupParams, reqEditors ...RequestEditorFn) (*GetPositionsGroupResponse, error)

	// PostPositionsGroup request with any body
	PostPositionsGroupWithBodyWithResponse(ctx context.Context, group GroupInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPositionsGroupResponse, error)

	PostPositionsGroupWithResponse(ctx context.Context, group GroupInPath, body PostPositionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPositionsGroupResponse, error)

	// GetPositionsGroupLast request
	GetPositionsGroupLastWithResponse(ctx context.Context, group GroupInPath, reqEditors ...RequestEditorFn) (*GetPositionsGroupLastResponse, error)

	// GetPositionsGroupColIdPath request
	GetPositionsGroupColIdPathWithResponse(ctx context.Context, group GroupInPath, colId CollectionId, path Path, params *GetPositionsGroupColIdPathParams, reqEditors ...RequestEditorFn) (*GetPositionsGroupColIdPathResponse, error)

	// GetTranscodings request
	GetTranscodingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTranscodingsResponse, error)

	// GetColIdAudioPath request
	GetColIdAudioPathWithResponse(ctx context.Context, colId CollectionId, path Path, params *GetColIdAudioPathParams, reqEditors ...RequestEditorFn) (*GetColIdAudioPathResponse, error)

	// GetColIdCoverPath request
	GetColIdCoverPathWithResponse(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*GetColIdCoverPathResponse, error)

	// GetColIdDescPath request
	GetColIdDescPathWithResponse(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*GetColIdDescPathResponse, error)

	// GetColIdDownloadPath request
	GetColIdDownloadPathWithResponse(ctx context.Context, colId CollectionId, path Path, params *GetColIdDownloadPathParams, reqEditors ...RequestEditorFn) (*GetColIdDownloadPathResponse, error)

	// GetColIdFolder request
	GetColIdFolderWithResponse(ctx context.Context, colId CollectionId, params *GetColIdFolderParams, reqEditors ...RequestEditorFn) (*GetColIdFolderResponse, error)

	// GetColIdFolderPath request
	GetColIdFolderPathWithResponse(ctx context.Context, colId CollectionId, path Path, params *GetColIdFolderPathParams, reqEditors ...RequestEditorFn) (*GetColIdFolderPathResponse, error)

	// GetColIdRecent request
	GetColIdRecentWithResponse(ctx context.Context, colId CollectionId, reqEditors ...RequestEditorFn) (*GetColIdRecentResponse, error)

	// GetColIdSearch request
	GetColIdSearchWithResponse(ctx context.Context, colId CollectionId, params *GetColIdSearchParams, reqEditors ...RequestEditorFn) (*GetColIdSearchResponse, error)
}

type PostAuthenticateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostAuthenticateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthenticateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCollectionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CollectionsInfo
}

// Status returns HTTPResponse.Status
func (r GetCollectionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCollectionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Position
}

// Status returns HTTPResponse.Status
func (r GetPositionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPositionsGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostPositionsGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPositionsGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsGroupLastResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Position
}

// Status returns HTTPResponse.Status
func (r GetPositionsGroupLastResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsGroupLastResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPositionsGroupColIdPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *interface{}
}

// Status returns HTTPResponse.Status
func (r GetPositionsGroupColIdPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPositionsGroupColIdPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTranscodingsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TranscodingsInfo
}

// Status returns HTTPResponse.Status
func (r GetTranscodingsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTranscodingsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdAudioPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetColIdAudioPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdAudioPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdCoverPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetColIdCoverPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdCoverPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdDescPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetColIdDescPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdDescPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdDownloadPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetColIdDownloadPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdDownloadPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdFolderResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AudioFolder
}

// Status returns HTTPResponse.Status
func (r GetColIdFolderResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdFolderResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdFolderPathResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AudioFolder
}

// Status returns HTTPResponse.Status
func (r GetColIdFolderPathResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdFolderPathResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdRecentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResult
}

// Status returns HTTPResponse.Status
func (r GetColIdRecentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdRecentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetColIdSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchResult
}

// Status returns HTTPResponse.Status
func (r GetColIdSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetColIdSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostAuthenticateWithBodyWithResponse request with arbitrary body returning *PostAuthenticateResponse
func (c *ClientWithResponses) PostAuthenticateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthenticateResponse, error) {
	rsp, err := c.PostAuthenticateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthenticateResponse(rsp)
}

func (c *ClientWithResponses) PostAuthenticateWithResponse(ctx context.Context, body PostAuthenticateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthenticateResponse, error) {
	rsp, err := c.PostAuthenticate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthenticateResponse(rsp)
}

// GetCollectionsWithResponse request returning *GetCollectionsResponse
func (c *ClientWithResponses) GetCollectionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetCollectionsResponse, error) {
	rsp, err := c.GetCollections(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCollectionsResponse(rsp)
}

// GetPositionsGroupWithResponse request returning *GetPositionsGroupResponse
func (c *ClientWithResponses) GetPositionsGroupWithResponse(ctx context.Context, group GroupInPath, params *GetPositionsGroupParams, reqEditors ...RequestEditorFn) (*GetPositionsGroupResponse, error) {
	rsp, err := c.GetPositionsGroup(ctx, group, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsGroupResponse(rsp)
}

// PostPositionsGroupWithBodyWithResponse request with arbitrary body returning *PostPositionsGroupResponse
func (c *ClientWithResponses) PostPositionsGroupWithBodyWithResponse(ctx context.Context, group GroupInPath, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPositionsGroupResponse, error) {
	rsp, err := c.PostPositionsGroupWithBody(ctx, group, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPositionsGroupResponse(rsp)
}

func (c *ClientWithResponses) PostPositionsGroupWithResponse(ctx context.Context, group GroupInPath, body PostPositionsGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPositionsGroupResponse, error) {
	rsp, err := c.PostPositionsGroup(ctx, group, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPositionsGroupResponse(rsp)
}

// GetPositionsGroupLastWithResponse request returning *GetPositionsGroupLastResponse
func (c *ClientWithResponses) GetPositionsGroupLastWithResponse(ctx context.Context, group GroupInPath, reqEditors ...RequestEditorFn) (*GetPositionsGroupLastResponse, error) {
	rsp, err := c.GetPositionsGroupLast(ctx, group, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsGroupLastResponse(rsp)
}

// GetPositionsGroupColIdPathWithResponse request returning *GetPositionsGroupColIdPathResponse
func (c *ClientWithResponses) GetPositionsGroupColIdPathWithResponse(ctx context.Context, group GroupInPath, colId CollectionId, path Path, params *GetPositionsGroupColIdPathParams, reqEditors ...RequestEditorFn) (*GetPositionsGroupColIdPathResponse, error) {
	rsp, err := c.GetPositionsGroupColIdPath(ctx, group, colId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPositionsGroupColIdPathResponse(rsp)
}

// GetTranscodingsWithResponse request returning *GetTranscodingsResponse
func (c *ClientWithResponses) GetTranscodingsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTranscodingsResponse, error) {
	rsp, err := c.GetTranscodings(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTranscodingsResponse(rsp)
}

// GetColIdAudioPathWithResponse request returning *GetColIdAudioPathResponse
func (c *ClientWithResponses) GetColIdAudioPathWithResponse(ctx context.Context, colId CollectionId, path Path, params *GetColIdAudioPathParams, reqEditors ...RequestEditorFn) (*GetColIdAudioPathResponse, error) {
	rsp, err := c.GetColIdAudioPath(ctx, colId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdAudioPathResponse(rsp)
}

// GetColIdCoverPathWithResponse request returning *GetColIdCoverPathResponse
func (c *ClientWithResponses) GetColIdCoverPathWithResponse(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*GetColIdCoverPathResponse, error) {
	rsp, err := c.GetColIdCoverPath(ctx, colId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdCoverPathResponse(rsp)
}

// GetColIdDescPathWithResponse request returning *GetColIdDescPathResponse
func (c *ClientWithResponses) GetColIdDescPathWithResponse(ctx context.Context, colId CollectionId, path Path, reqEditors ...RequestEditorFn) (*GetColIdDescPathResponse, error) {
	rsp, err := c.GetColIdDescPath(ctx, colId, path, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdDescPathResponse(rsp)
}

// GetColIdDownloadPathWithResponse request returning *GetColIdDownloadPathResponse
func (c *ClientWithResponses) GetColIdDownloadPathWithResponse(ctx context.Context, colId CollectionId, path Path, params *GetColIdDownloadPathParams, reqEditors ...RequestEditorFn) (*GetColIdDownloadPathResponse, error) {
	rsp, err := c.GetColIdDownloadPath(ctx, colId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdDownloadPathResponse(rsp)
}

// GetColIdFolderWithResponse request returning *GetColIdFolderResponse
func (c *ClientWithResponses) GetColIdFolderWithResponse(ctx context.Context, colId CollectionId, params *GetColIdFolderParams, reqEditors ...RequestEditorFn) (*GetColIdFolderResponse, error) {
	rsp, err := c.GetColIdFolder(ctx, colId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdFolderResponse(rsp)
}

// GetColIdFolderPathWithResponse request returning *GetColIdFolderPathResponse
func (c *ClientWithResponses) GetColIdFolderPathWithResponse(ctx context.Context, colId CollectionId, path Path, params *GetColIdFolderPathParams, reqEditors ...RequestEditorFn) (*GetColIdFolderPathResponse, error) {
	rsp, err := c.GetColIdFolderPath(ctx, colId, path, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdFolderPathResponse(rsp)
}

// GetColIdRecentWithResponse request returning *GetColIdRecentResponse
func (c *ClientWithResponses) GetColIdRecentWithResponse(ctx context.Context, colId CollectionId, reqEditors ...RequestEditorFn) (*GetColIdRecentResponse, error) {
	rsp, err := c.GetColIdRecent(ctx, colId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdRecentResponse(rsp)
}

// GetColIdSearchWithResponse request returning *GetColIdSearchResponse
func (c *ClientWithResponses) GetColIdSearchWithResponse(ctx context.Context, colId CollectionId, params *GetColIdSearchParams, reqEditors ...RequestEditorFn) (*GetColIdSearchResponse, error) {
	rsp, err := c.GetColIdSearch(ctx, colId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetColIdSearchResponse(rsp)
}

// ParsePostAuthenticateResponse parses an HTTP response from a PostAuthenticateWithResponse call
func ParsePostAuthenticateResponse(rsp *http.Response) (*PostAuthenticateResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthenticateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCollectionsResponse parses an HTTP response from a GetCollectionsWithResponse call
func ParseGetCollectionsResponse(rsp *http.Response) (*GetCollectionsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCollectionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CollectionsInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPositionsGroupResponse parses an HTTP response from a GetPositionsGroupWithResponse call
func ParseGetPositionsGroupResponse(rsp *http.Response) (*GetPositionsGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostPositionsGroupResponse parses an HTTP response from a PostPositionsGroupWithResponse call
func ParsePostPositionsGroupResponse(rsp *http.Response) (*PostPositionsGroupResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPositionsGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPositionsGroupLastResponse parses an HTTP response from a GetPositionsGroupLastWithResponse call
func ParseGetPositionsGroupLastResponse(rsp *http.Response) (*GetPositionsGroupLastResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsGroupLastResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Position
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPositionsGroupColIdPathResponse parses an HTTP response from a GetPositionsGroupColIdPathWithResponse call
func ParseGetPositionsGroupColIdPathResponse(rsp *http.Response) (*GetPositionsGroupColIdPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPositionsGroupColIdPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTranscodingsResponse parses an HTTP response from a GetTranscodingsWithResponse call
func ParseGetTranscodingsResponse(rsp *http.Response) (*GetTranscodingsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTranscodingsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TranscodingsInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetColIdAudioPathResponse parses an HTTP response from a GetColIdAudioPathWithResponse call
func ParseGetColIdAudioPathResponse(rsp *http.Response) (*GetColIdAudioPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdAudioPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColIdCoverPathResponse parses an HTTP response from a GetColIdCoverPathWithResponse call
func ParseGetColIdCoverPathResponse(rsp *http.Response) (*GetColIdCoverPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdCoverPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColIdDescPathResponse parses an HTTP response from a GetColIdDescPathWithResponse call
func ParseGetColIdDescPathResponse(rsp *http.Response) (*GetColIdDescPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdDescPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColIdDownloadPathResponse parses an HTTP response from a GetColIdDownloadPathWithResponse call
func ParseGetColIdDownloadPathResponse(rsp *http.Response) (*GetColIdDownloadPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdDownloadPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetColIdFolderResponse parses an HTTP response from a GetColIdFolderWithResponse call
func ParseGetColIdFolderResponse(rsp *http.Response) (*GetColIdFolderResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdFolderResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudioFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetColIdFolderPathResponse parses an HTTP response from a GetColIdFolderPathWithResponse call
func ParseGetColIdFolderPathResponse(rsp *http.Response) (*GetColIdFolderPathResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdFolderPathResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AudioFolder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetColIdRecentResponse parses an HTTP response from a GetColIdRecentWithResponse call
func ParseGetColIdRecentResponse(rsp *http.Response) (*GetColIdRecentResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdRecentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetColIdSearchResponse parses an HTTP response from a GetColIdSearchWithResponse call
func ParseGetColIdSearchResponse(rsp *http.Response) (*GetColIdSearchResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetColIdSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
